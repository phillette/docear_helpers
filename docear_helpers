#! /usr/bin/python
from __future__ import print_function, division
import scriptine
import os, sys, subprocess
import urlparse, urllib
from bs4 import BeautifulSoup as Soup
import re, bibtexparser
import shutil, glob
from datetime import datetime
import re
from distutils.dir_util import copy_tree
from collections import OrderedDict

from schlichtanders.mycontextmanagers import ignored
from schlichtanders.mystrings import append_after, replace_all
from schlichtanders.myos import manipulate_file, open_by_default_application, abspath, ensure_endswith_sep
import string
import random
from getpass import getuser
from sys import platform

__path__ = os.path.dirname(os.path.realpath(__file__))
absolute_path = re.compile(r"[A-Z]:")
# constants
# ---------
#

if platform in ["win32", "cygwin"]:
    user_settings_path = os.path.expanduser(r"c:\Users\%s\.docear/users/local/user.settings" % getuser())
elif platform in ["darwin"]:
    user_settings_path = os.path.expanduser("/User/%s/.docear/users/local/user.settings" % getuser())
elif platform in ["linux2"]:
    user_settings_path = os.path.expanduser("~/.docear/users/local/user.settings")
else:
    raise RuntimeError("Platform not supported. Could not find Docear Settings folder.")

project_id_regex = re.compile(r"project://([^/]*)")

if platform in ["win32", "cygwin"]:
    DOCEAR_url_start = "file\:/"
else:
    DOCEAR_url_start = "file\:"
# PYTHON_url_start = "file://"

# helpers
# -------
#


def from_bibtexpath(path):
    if platform in ["win32", "cygwin"]:
        path = path.replace(r"\:", ":")
        path = path.replace("\\\\", "\\")
        # path = path.replace("\\\\", "/")  # first search for raw encoding
        # path = path.replace("\\", "/")  # then for non-raw encoding (the other way arround does not work)
    else:
        raise NotImplemented
    return path

def to_bibtexpath(path):
    if platform in ["win32", "cygwin"]:
        if absolute_path.match(path):
            path = re.sub(":", r"\:", path, count=1)  # replace only first one which we checked is there
        path = path.replace("\\", "\\\\")
        # path = path.replace("\\\\", "/")  # first search for raw encoding
        # path = path.replace("\\", "/")  # then for non-raw encoding (the other way arround does not work)
    else:
        raise NotImplemented
    return path


def to_DOCEAR_url(path, prepend_file_protocol=True):
    if platform in ["win32", "cygwin"]:
        path = path.replace(os.sep, "/")
        path = urllib.quote(path, safe=r'/\(),:')
        if absolute_path.match(path):
            path = re.sub(":", r"\:", path, count=1)  # replace only first one which we checked is there
    else:
        path = urllib.quote(path, safe='/(),')

    if prepend_file_protocol:
        return DOCEAR_url_start + path
    return path


def cutstart(string, startswith):
    if string.startswith(startswith):
        return string[len(startswith):]
    return string


def from_DOCEAR_url(url):
    # DOCEAR SPECIFIC: replace Project protocoll if it is there
    if url.startswith("project://"):
        project_id = project_id_regex.match(url).group(1)
        project_path = cutstart(user_settings[project_id], DOCEAR_url_start)
        url = url.replace("project://" + project_id + "/", project_path)  # path_url is percent encoded url for sure

    elif url.startswith(DOCEAR_url_start):
        url = url[len(DOCEAR_url_start):]  # +1 because we had to add a "/" in front

    if platform in ["win32", "cygwin"]:
        url = url.replace(r"\:", ":")  # assuming that \: won't be used anywhere else
        url = urllib.unquote(url)
        url = url.replace("/", os.sep)
    return url



def id_generator(size=33-2, chars=string.ascii_uppercase + string.digits):
    # full year used here is two characters longer than year used in docear usually, therefore -2
    return ''.join(random.SystemRandom().choice(chars) for _ in range(size))

# windows extras


# commands
# ========

def open_user_settings_command():
    """ opens user.settings file with default text editor """
    open_by_default_application(user_settings_path)

def init_command(literatur_dir=".", bibfile=None, projectname=None):
    """ initializes current directory as a docear project

    Make sure that docear is closed for this to work.
    Otherwise settings get overwritten and the project cannot be automatically imported.

    :param literatur_dir:    Optional directory for literatur (pdfs or other files which get automatically drawn into docear). Defaults to current directory itself

    :param bibfile:          Optional name of (latex) bib-file for already existent references. Defaults to creating `references.bib`

    :param projectname:      Optional name of project which appears in docear projekt-list. Defaults to name of current directory.

    """
    now = datetime.now()
    newID = "%s%s%s" % (now.year, now.month, id_generator())

    curdir_path = abspath(os.path.curdir)
    _, curdir_fn = os.path.split(curdir_path)
    settingsxlm_dir = os.path.join(curdir_path, "_data", newID)
    settingsxlm_fn = os.path.join(settingsxlm_dir, "settings.xml")

    # copy initialization files
    # -------------------------

    copy_tree(os.path.join(__path__,"docear_init", "_data", "IDIDIDID"), settingsxlm_dir)

    # adapt user.settings
    # -------------------

    line_start = "org.freeplane.plugin.workspace.mindmapmode.model.projects"
    pattern_line_starting_with = r"^%s.*$"
    manipulate_file(append_after, user_settings_path,
        string = ",%s" % newID,
        split_regex = pattern_line_starting_with % line_start
    )
    add_to_user_settings = "%s=%s\n" % (newID, to_DOCEAR_url(ensure_endswith_sep(curdir_path)))
    manipulate_file(append_after, user_settings_path, add_to_user_settings)

    # adapt settings.xml
    # ------------------

    if projectname is None:
        projectname = curdir_fn

    literaturename = curdir_fn if literatur_dir == "." else os.path.split(literatur_dir)[1]
    literatur_dir = "" if literatur_dir == "." else ensure_endswith_sep(literatur_dir)

    replace = {
        "IDIDIDID" : newID,
        "PROJECTNAME" : projectname,
        "LITERATURENAME" : literaturename,
        "LITERATUREFOLDERNAME/" : to_DOCEAR_url(literatur_dir, prepend_file_protocol=False),
    }

    if bibfile is not None:
        replace["references.bib"] = bibfile
    else:
        open(os.path.join(curdir_path, "references.bib"), 'w')

    manipulate_file(replace_all, settingsxlm_fn, replace)
    pass


def autorename_command(project_path, format=r"%AUTHOR (%YEAR) %TITLE"):
    """ renames all pdf files according to their meta-data in references.bib
    (concerns all pdfs listed in the given docear project)

    :param project_path:     directory to docear folder (e.g. where `docear_helpers init` was called)
    :param format:           Optional semi-abstract format string. %AUTHOR, %YEAR, %TITLE, etc (capitalized versions of bib-file entries) get replaced by their bib-file match.
     """
    project_path = abspath(project_path)
    try:
        project_setting_file = glob.glob(os.path.join(project_path, "_data", "*", "settings.xml"))[0]
    except IndexError:
        print("Not a project directory. Nothing renamed")
        return

    # collect all files
    # -----------------
    with open(project_setting_file) as pro:
        soup = Soup(pro, 'xml')
        # project_id = soup.project['ID']  # not needed for now
        mindmaps = [from_DOCEAR_url(link['path']) for link in soup.select("folder[type=library] > link")]
        bibfile = from_DOCEAR_url(soup.find(type="references")["path"])

    # go through all renamings
    template = re.sub(r"%[A-Z]*", lambda p: "{%s}" % p.group()[1:].lower(), format)
    #template = format.replace("%AUTHOR", "{author}").replace("%YEAR", "{year}").replace("%TITLE", "{title}")
    template += ".pdf"

    with open(bibfile) as bib:
        bibdb = bibtexparser.load(bib)

    for entry in bibdb.entries:
        _entry = {} #make entries uniform entries
        for key in entry.keys():
            _entry[key] = entry[key].replace("\n", " ")


        _start, _end = ":", ":PDF"
        if not _entry['file'].startswith(_start) or not _entry['file'].endswith(_end):
            continue
        _old_path = _entry['file'][len(_start):-len(_end)]
        old_path = from_bibtexpath(_old_path)


        folder, old_file = os.path.split(old_path)
        new_file = template.format(**_entry)
        # TODO escaped sequences seem to get double escaped, i._entry. \->\\
        # print("#\\\\:", new_file.count("\\\\"))
        new_file = new_file.replace("\\\\", "\\")  # TODO really needed?
        if old_file == new_file:
            continue
        new_path = os.path.join(folder, new_file)

        # update bibtex entry
        entry['file'] = _start + to_bibtexpath(new_path) + _end



        # SAVE EVERYTHING
        # ===============

        # change file names:
        shutil.copy(old_path, old_path + ".bak")  # security copy
        shutil.move(old_path, new_path)

        # change everything in mindmaps accordingly: SPECIAL PERCENT ENCODING NEEDED!!
        new_url_part = to_DOCEAR_url(new_file, prepend_file_protocol=False)
        old_url_part = to_DOCEAR_url(old_file, prepend_file_protocol=False)

        # IMPORTANT: first change url, then normal file, as otherwise urls might get disrupted.
        replace = OrderedDict([
            (old_url_part, new_url_part),
            (old_file, new_file),
        ])
        for mm in mindmaps:
            with ignored(IOError):
                manipulate_file(replace_all, mm, replace)

        # change also bibfile for each single reference so that everything is saved if one file was parsed succesfully
        shutil.copy(bibfile, bibfile+".bak")  # security copy
        with open(bibfile, "w") as f:
            bibtexparser.dump(bibdb, f)

    print("renamed files")


def move_command(cur_dir, new_dir):
    """ moves / renames docear project to another directory

    :param cur_dir: docear directory (e.g. initilized with `docear_helpers init`)
    :param new_dir: docear directory to move to (e.g. initilized with `docear_helpers init`)
    """

    old_dir = abspath(cur_dir)
    new_dir = abspath(new_dir)
    old_url = to_DOCEAR_url(old_dir, prepend_file_protocol=False)
    new_url = to_DOCEAR_url(new_dir, prepend_file_protocol=False)

    try:
        project_setting_file = glob.glob(os.path.join(old_dir,"_data/*/settings.xml"))[0]
    except IndexError:
        print("Not a project directory. Nothing moved")
        return

    # Update references.bib file
    # --------------------------
    with open(project_setting_file) as f:
        soup = Soup(f, 'xml')
        bibfile = from_DOCEAR_url(soup.find(type="references")["path"])

    manipulate_file(replace_all, bibfile, {old_dir: new_dir})
    manipulate_file(replace_all, user_settings_path, {old_url: new_url})

    # Move directory
    # --------------
    shutil.move(old_dir, new_dir)


if __name__ == '__main__':
    #extract all user_settings (here mainly the project directories are needed)
    user_settings = {}
    with open(user_settings_path) as f:
        for line in f.read().splitlines():
            try:
                key, value = line.split("=")
                user_settings[key] = value
            except ValueError:
                continue

    scriptine.run()
